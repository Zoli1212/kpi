'use client'
import React, { useState, useMemo, useEffect } from 'react'
import KPITable from './KPITable'
import FilterComponent from './FilterComponent'
import DatePicker from 'react-datepicker'
import 'react-datepicker/dist/react-datepicker.css'
import { format } from 'date-fns';
import { hu } from 'date-fns/locale'

interface TableData {
  id: number;
  date: string;
  itemName: string;
  serviceName: string;
  systemName: string;
  value: number;
  nextValue: number;
  description: string;
  itemId: number;
  originalDate?: string;
  monthYear?: string;
}

interface FilterOption {
  id: number;
  name: string;
  description: string;
}

interface DisplayComponentProps {
  data: TableData[];
  systems: FilterOption[];
  services: FilterOption[];
  items: FilterOption[];
}

const DisplayComponent: React.FC<DisplayComponentProps> = ({
  data,
  systems,
  services,
  items
}) => {
  // State for date picker and filters
  const [selectedDate, setSelectedDate] = useState<Date | null>(new Date())
  const [showDatePicker, setShowDatePicker] = useState(false)
  const [selectedItem, setSelectedItem] = useState('Összes tétel')
  const [selectedService, setSelectedService] = useState('Összes szolgáltatás')
  const [selectedSystem, setSelectedSystem] = useState('Összes rendszer')

  // Reset filters when data changes
  useEffect(() => {
    console.log('Data changed, resetting filters');
    console.log('First data item:', data[0]);
    
    if (data.length > 0) {
      const dates = data.map(item => new Date(item.date));
      const mostRecentDate = new Date(Math.max(...dates.map(date => date.getTime())));
      setSelectedDate(mostRecentDate);
    } else {
      setSelectedDate(new Date());
    }
    
    setSelectedItem('Összes tétel');
    setSelectedService('Összes szolgáltatás');
    setSelectedSystem('Összes rendszer');
  }, [data]);

  // Get unique values for filter options
  const serviceOptions = useMemo(() => 
    ['Összes szolgáltatás', ...new Set(data.map(item => item.serviceName))], 
    [data]
  );
  
  const itemOptions = useMemo(() => 
    ['Összes tétel', ...new Set(data.map(item => item.itemName))], 
    [data]
  );
  
  const systemOptions = useMemo(() => 
    ['Összes rendszer', ...new Set(data.map(item => item.systemName))], 
    [data]
  );

  // Format date for display
  const formatDate = (date: Date | null) => {
    if (!date) return 'Válasszon dátumot';
    return format(date, 'yyyy. MMMM', { locale: hu });
  };

  // Filter data based on selected month and other filters
  const filteredData = useMemo(() => {
    console.log('Filtering data with selectedDate:', selectedDate);
    console.log('Input data length:', data.length);
    
    if (!selectedDate) {
      console.log('No date selected');
      return [];
    }
    
    // Get the selected month and year
    const selectedMonth = selectedDate.getMonth() + 1;
    const selectedYear = selectedDate.getFullYear();
    const selectedMonthYear = `${selectedYear}-${String(selectedMonth).padStart(2, '0')}`;
    
    console.log('Selected month:', selectedMonthYear);
    
    // Filter data for the selected month
    const result = data.filter(record => {
      if (!record.date) return false;
      const recordDate = new Date(record.date);
      const recordMonth = recordDate.getMonth() + 1;
      const recordYear = recordDate.getFullYear();
      const recordMonthYear = `${recordYear}-${String(recordMonth).padStart(2, '0')}`;
      
      return recordMonthYear === selectedMonthYear;
    });
    
    console.log('Filtered data for selected month:', result);
    
    // Apply additional filters if any
    return result.filter(record => {
      const matchesItem = selectedItem === 'Összes tétel' || record.itemName === selectedItem;
      const matchesService = selectedService === 'Összes szolgáltatás' || record.serviceName === selectedService;
      const matchesSystem = selectedSystem === 'Összes rendszer' || record.systemName === selectedSystem;
      
      return matchesItem && matchesService && matchesSystem;
    });
  }, [data, selectedDate, selectedItem, selectedService, selectedSystem]);

  // Debug filtered data
  useEffect(() => {
    console.log('Filtered data:', filteredData);
  }, [filteredData]);

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-6">KPI Adatok</h1>
      
      {/* Filter Section */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h2 className="text-lg font-semibold mb-4">Szűrők</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Dátum</label>
            <div 
              className="relative w-full p-2 border rounded cursor-pointer"
              onClick={() => setShowDatePicker(!showDatePicker)}
            >
              {formatDate(selectedDate)}
            </div>
            {showDatePicker && (
              <div className="absolute z-10 mt-1">
                <DatePicker
                  selected={selectedDate}
                  onChange={(date) => {
                    setSelectedDate(date);
                    setShowDatePicker(false);
                  }}
                  dateFormat="yyyy-MM"
                  showMonthYearPicker
                  inline
                />
              </div>
            )}
          </div>
          
          <FilterComponent
            label="Tétel"
            options={itemOptions}
            selected={selectedItem}
            onChange={setSelectedItem}
          />
          
          <FilterComponent
            label="Szolgáltatás"
            options={serviceOptions}
            selected={selectedService}
            onChange={setSelectedService}
          />
          
          <FilterComponent
            label="Rendszer"
            options={systemOptions}
            selected={selectedSystem}
            onChange={setSelectedSystem}
          />
        </div>
      </div>
      
      {/* Data Table */}
      <div className="bg-white p-4 rounded-lg shadow">
        <KPITable data={filteredData} />
      </div>
      
      {/* Debug Info */}
      <div className="mt-4 p-2 bg-gray-50 rounded text-xs text-gray-500">
        <p>Debug Info:</p>
        <p>Selected Date: {selectedDate?.toISOString()}</p>
        <p>Filtered Items: {filteredData.length}</p>
        <p>Selected Item: {selectedItem}</p>
        <p>Selected Service: {selectedService}</p>
        <p>Selected System: {selectedSystem}</p>
      </div>
    </div>
  );
};

export default DisplayComponent;
